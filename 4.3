//4.3
// Hoàng Hải Yến
#include <stdio.h>
#include <stdlib.h>

#define MINVALUE -2000000000

typedef int datatype;

typedef struct _StackNode
{
	datatype inf;
	struct _StackNode *next;
} StackNode;

typedef struct _Stack
{
	StackNode *top;
} Stack;

Stack *makeStack()
{
	Stack *p = (Stack *)malloc(sizeof(Stack));
	if (p == NULL)
	{
		printf("Error in mem allocation\n");
		exit(1);
	}
	p->top = NULL;
	return p;
}

StackNode *makeNode(datatype x)
{
	StackNode *p = (StackNode *)malloc(sizeof(StackNode));
	if (p == NULL)
	{
		printf("Error in mem allocation\n");
		exit(1);
	}
	p->inf = x;
	p->next = NULL;
	return p;
}

void printList(StackNode *h)
{
	StackNode *p = h;
	while (p != NULL)
	{
		printf("%d ", p->inf);
		p = p->next;
	}
	printf("\n");
}

void push(Stack *s, datatype x)
{
	StackNode *q = makeNode(x);

	if (s->top == NULL)
	{
		s->top = q;
		return;
	}

	q->next = s->top;
	s->top = q;
}

datatype pop(Stack *s)
{
	if (s == NULL || s->top == NULL)
	{
		return MINVALUE;
	}

	StackNode *tmp = s->top;
	s->top = s->top->next;
	datatype x = tmp->inf;
	free(tmp);

	return x;
}

int isEmpty(Stack *s)
{
	if (s == NULL || s->top == NULL)
		return 1;
	return 0;
}

int main()
{
	int dautau[6];
	Stack *s = makeStack();
	for (int i = 0; i < 6; i++){
		scanf("%d", &dautau[i]);
		// printf("k");
	}
	int index = 0, v = 1;
	while (index < 6){
		if (!isEmpty(s)){
			StackNode *p = s->top;
			while(!isEmpty(s) && p->inf == dautau[index]){
				pop(s);
				printf("R ");
				index++;
				p = s->top;
			}
		}
		if(v < 7){
			// printf("%d ",v);
			push(s, v);
			v++;
			printf("V ");
		}
	}
	return 0;
}
