//4.8
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<stdbool.h>
// Hoàng Hải Yến
struct node{ 
 	int data; 
 	struct node* next; 
};
 
typedef struct node Node;

typedef struct {
	Node* first;
}TList;

//kiem tra xem DSLK co rong ko, neu rong thi con tro first tro vao NULL
bool isEmpty(TList* list){
	return list->first==NULL; //neu dung thi tra ve TRUE
}

//ham tao danh sach
TList* createList(){
	TList* list = (TList*)malloc(sizeof(TList));
	list->first = NULL;
	return list;
}

//ham cap phat node
Node* allocateNode(){
	Node* pNode = (Node*)malloc(sizeof(Node));
	if(pNode == NULL)
		printf("\tKhong du o nho cap phat\n");
	return pNode;
}

//ham khoi tao, cap phat o nho va gan gia tri cho 1 node
Node* createNode(int value)
{
	//xin cap phat cho 1 bien node
	Node* pNode = allocateNode();
	pNode->data = value;
	pNode->next = NULL; //tam thoi tro vao NULL vi chua biet tro vao dau
	return pNode;
}
// ham nhap value (data cho node)
int inputData()
{
	int tmp;
	scanf("%d",&tmp);
	return tmp;
}

//ham them mot node vao vi tri dau tien cua DSLK (DSLK rong)
void addFirstNode(TList* list, Node* pNode)
{
	pNode->next = NULL;
	list->first = pNode;
}

//ham them 1 node vao dau DSLK (ko rong)
void addNodeAtFront(TList* list, Node* pNode)
{
	if(isEmpty(list))
	{
		addFirstNode(list,pNode);
	}
	else
	{
		pNode->next = list->first;
		list->first = pNode;
	}
}


//in toan bo danh sach
void printfList(TList* list)
{
	Node* i;
	for( i=list->first; i != NULL; i=i->next)
		printf("%d ",i->data);
}

// tim node cuoi cung
Node* getLastNode(TList* list)
{
	if(isEmpty(list))
		return NULL;
	Node* lastNode = list->first;
	while(lastNode->next != NULL)
		lastNode = lastNode->next;
		return lastNode;
}
//them node vao cuoi danh sach
void addNodeAtLast(TList* list, Node* pNode)
{
	if(isEmpty(list))
	{
		addFirstNode(list,pNode);
	}
	else
	{
		//tim node cuoi cung
		Node* lastNode = getLastNode(list);
		
		//bien pNode thanh node cuoi
		pNode->next = NULL;
		lastNode->next = pNode;
	}
	
}

//tìm nút thứ k
Node* getKNode(TList* list, int k)
{
    int tmp = 1;
	if(isEmpty(list))
		return NULL;
	Node* KNode = list->first;
	while(KNode->next != NULL){
		KNode = KNode->next;
        tmp ++;
        if (tmp == k)
            break;
    }
	return KNode;
}

//them pnode vao sau nút thứ k
void addNodeAtK(TList* list, Node* pNode,int k)
{
	if(isEmpty(list))
	{
		addFirstNode(list,pNode);
	}
	else
	{
		//tim node thứ k
		Node* KNode = getKNode(list,k);
		
		//chèn vào sau node thứ k
		pNode->next = KNode->next;
		KNode->next = pNode;
	}
	
}

// Hàm loại bỏ nút đứng trước nút thứ k
void removeNodeBeforeK(TList *L, int k) {
    if (L == NULL || k <= 1) {
        return;
    }

    Node *KNode = L->first;
    Node *prev = NULL;
    Node *nodeBeforePrev = NULL;

    // Duyệt danh sách để tìm nút đứng trước nút thứ k
    for (int i = 1; KNode != NULL && i < k; ++i) {
        nodeBeforePrev = prev;
        prev = KNode;
        KNode = KNode->next;
    }

    if (KNode == NULL || prev == NULL) {
        return;
    }

    // Xóa nút đứng trước nút thứ k
    if (nodeBeforePrev != NULL) {
        nodeBeforePrev->next = prev->next; //xóa node prev
    } else {
        // Nếu nút đứng trước là nút đầu tiên
        L->first = prev->next;
    }
    free(prev); // Giải phóng bộ nhớ của nút bị loại bỏ
}


// tính số lượng nút của danh sách
int count(TList* list){
	Node* p = list->first;

	int cnt = 0;
	while(p != NULL) {
        cnt ++;
		p = p->next;
	}
	return cnt;
}

void combine(TList* Q, TList* P, int k){
    Node* node = getKNode(Q,k);
    Node* lastNode = getLastNode(P);
    if (!isEmpty(P)){ //P khác rỗng mới tiến hành ghép P vào Q
        if (isEmpty(Q)){
            Q = P;
        }
        else{
            lastNode->next = node->next;
            node->next = P->first;
        }
    }
}

void divide(TList* Q, TList* P, int k){
    Node* node = getKNode(Q,k);
    P->first = node->next;
    node->next = NULL;
}


// đệ quy để đảo ngược danh sách
void printListReverse(Node* p) {
    if (p == NULL) return;
    printListReverse(p->next); // Đệ quy vào nút tiếp theo
    printf("%d ", p->data);    // In ra giá trị sau khi đã đệ quy xong
}
int main(){
    TList* listL = createList();
	int n;
    printf("Nhap so luong pha tu list L");
	scanf("%d",&n);
	int i;
	for(i=0;i<n;i++)
		addNodeAtLast(listL,createNode(inputData()));
    Node* p = listL->first;
    printListReverse(p);

    /*TList* listQ = createList();
	TList* listP = createList();
	int n;
    printf("Nhap so luong pha tu list Q");
	scanf("%d",&n);
	int i;
	for(i=0;i<n;i++)
		addNodeAtLast(listQ,createNode(inputData()));
	
    printfList(listQ);
    printf("\n");
    divide(listQ, listP, 4);
    printfList(listQ);
    printf("\n");
    printfList(listP);
    */

	/*TList* listQ = createList();
	
	int n;
    printf("Nhap so luong pha tu list Q");
	scanf("%d",&n);
	int i;
	for(i=0;i<n;i++)
		addNodeAtLast(listQ,createNode(inputData()));
	
    printfList(listQ);
    printf("\n");

    TList* listP = createList();
	
	printf("Nhap so luong pha tu list P");
	scanf("%d",&n);
	for(i=0;i<n;i++)
		addNodeAtLast(listP,createNode(inputData()));
	
    printfList(listP);
    printf("\n");
    combine(listQ, listP, 4);
    printfList(listQ);
    */

    /*
    printf("\n");
    printf("%d",count(list));
    */
    /*
    addNodeAtK(list, createNode(inputData()),4);
    printfList(list);
    printf("\n");
    removeNodeBeforeK(list,6);
    printfList(list);
    */
//}
