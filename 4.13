4.13
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<stdbool.h>
// Hoàng Hải Yến
struct node{ 
 	int data; 
    struct node* prev;
 	struct node* next; 
};
 
typedef struct node Node;

typedef struct {
	Node* T;
    Node* BT;
}TList;

//kiem tra xem DSLK co rong ko, neu rong thi con tro first tro vao NULL
bool isEmpty(TList* list){
	return list->T==NULL && list->BT == NULL; //neu dung thi tra ve TRUE
}

//ham tao danh sach
TList* createList(){
	TList* list = (TList*)malloc(sizeof(TList));
	list->T = NULL;
    list->BT = NULL;
	return list;
}

//ham cap phat node
Node* allocateNode(){
	Node* pNode = (Node*)malloc(sizeof(Node));
	if(pNode == NULL)
		printf("\tKhong du o nho cap phat\n");
	return pNode;
}

//ham khoi tao, cap phat o nho va gan gia tri cho 1 node
Node* createNode(int value)
{
	//xin cap phat cho 1 bien node
	Node* pNode = allocateNode();
	pNode->data = value;
	pNode->prev = pNode->next = NULL; //tam thoi tro vao NULL vi chua biet tro vao dau
	return pNode;
}
// ham nhap value (data cho node)
int inputData()
{
	int tmp;
	scanf("%d",&tmp);
	return tmp;
}

//ham them mot node vao vi tri dau tien cua DSLK (DSLK rong)
void addFirstNode(TList* list, Node* pNode)
{
    list->T = list->BT = pNode;
	pNode->next = NULL;
    pNode->prev = NULL;
}


// Thêm một node vào cuối danh sách
void PUSH(TList* list, Node* pNode) {
    if (isEmpty(list)) {
        // Nếu danh sách rỗng, thêm node đầu tiên
        list->T = list->BT = pNode;
        pNode->prev = pNode->next = NULL;
    } else {
        // Nếu danh sách không rỗng, thêm vào cuối danh sách
        pNode->prev = list->BT;
        pNode->next = NULL;
        list->BT->next = pNode;
        list->BT = pNode;
    }
}

//in toan bo danh sach
void BTRAVERSE(TList* list)
{
	Node* i;
	for( i=list->BT; i != NULL; i=i->prev)
		printf("%d ",i->data);
}

void POP(TList* list, Node* delNode) {
    if (delNode == NULL || list == NULL) return;
    
    // Nếu node cần xóa là node đầu tiên
    if (list->T == delNode) {
        list->T = delNode->next;
        if (list->T != NULL) {
            list->T->prev = NULL;
        }
        else {
            list->BT = NULL; 
        }
        free(delNode);
    }
    // Nếu node cần xóa là node cuối cùng
    else if (list->BT == delNode) {
        list->BT = delNode->prev;
        if (list->BT != NULL) {
            list->BT->next = NULL;
        }
        free(delNode);
    }
    // Nếu node cần xóa là node giữa
    else {
        delNode->prev->next = delNode->next;
        delNode->next->prev = delNode->prev;
        free(delNode);
    }
}


int main(){
    TList* list = createList();
	int n;
    printf("Nhap so luong pha tu list: ");
	scanf("%d",&n);
	int i;
	for(i=0;i<n;i++)
		PUSH(list,createNode(inputData()));

    BTRAVERSE(list);
    printf("\n");
}
