// tất cả thao tác với stack
#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>
#include<string.h>
#include<malloc.h>
#include<math.h>
#define MAX 100000
#define MAX_SIZE 1000

void xoaxuongdong(char x[]){
    if(x[strlen(x)-1]=='\n')
    x[strlen(x)-1]='\0';
}

// cấu trúc của Stack
typedef struct 
{
    int top;
    int data[MAX];
}stack;

// khởi tạo một stack
stack createStack()
{
    stack s;
    s.top = -1;
    return s;
}

//kiểm tra xem stack rỗng ko
bool isEmpty( stack s)
{
    if(s.top == -1)
        return true;
    return false;
}

// kiểm tra xem stak đầy hay ko
bool isFull( stack s)
{
    if(s.top == MAX-1)
        return true;
    return false;

}

//thêm một phần tử vào stack
bool push ( stack* s, int value)
{
    if(isFull(*s))
    {
        printf("\tStack full\n");
        return false;
    }
    s->top +=1;
    s->data[s->top] = value;
    return true;
}

// lấy giá trị phần tử trên cùng
int peek(stack s)
{
    if(isEmpty(s))
        return -1;
    return s.data[s.top];
}

// đẩy phần tử trên cùng ra ngoài đồng thời in ra giá trị đấy
int pop( stack* s)
{
    if(isEmpty(*s))
    {
        return -1;
    }

    int res = s->data[s->top];
    s->top -=1;
    return res;
}

//in toàn bộ stack
/*void printStack(struct stack s)
{
    for(int i=0; i<=s.top;i++)
        printf("%d ",s.data[i]);
    printf("\n");
}
*/


void printStack(stack* s)
{
    while(!isEmpty(*s))
    {
        printf("%x",pop(s));
    }
}

void fromDecimalToNewBase(int n,int newBase,  stack* s)
{
    while(n != 0)
    {
        push(s,n%newBase);
        n /= newBase;
    }
}
int main()
{
    stack s = createStack();
    int n, newBase;
    printf("Number: ");
    scanf("%d", &n);
    printf("Base: ");
    scanf("%d",&newBase);
    fromDecimalToNewBase(n,newBase,&s);
    printStack(&s);


}
