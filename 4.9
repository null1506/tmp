4.9
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<stdbool.h>
// Hoàng Hải Yến
struct node{ 
 	int data; 
 	struct node* next; 
};
 
typedef struct node Node;

typedef struct {
	Node* first;
}TList;

//kiem tra xem DSLK co rong ko, neu rong thi con tro first tro vao NULL
bool isEmpty(TList* list){
	return list->first==NULL; //neu dung thi tra ve TRUE
}

//ham tao danh sach
TList* createList(){
	TList* list = (TList*)malloc(sizeof(TList));
	list->first = NULL;
	return list;
}

//ham cap phat node
Node* allocateNode(){
	Node* pNode = (Node*)malloc(sizeof(Node));
	if(pNode == NULL)
		printf("\tKhong du o nho cap phat\n");
	return pNode;
}

//ham khoi tao, cap phat o nho va gan gia tri cho 1 node
Node* createNode(int value)
{
	//xin cap phat cho 1 bien node
	Node* pNode = allocateNode();
	pNode->data = value;
	pNode->next = NULL; //tam thoi tro vao NULL vi chua biet tro vao dau
	return pNode;
}
// ham nhap value (data cho node)
int inputData()
{
	int tmp;
	scanf("%d",&tmp);
	return tmp;
}

//ham them mot node vao vi tri dau tien cua DSLK (DSLK rong)
void addFirstNode(TList* list, Node* pNode)
{
	pNode->next = NULL;
	list->first = pNode;
}

//in toan bo danh sach
void printfList(TList* list)
{
	Node* i;
	for( i=list->first; i != NULL; i=i->next)
		printf("%d ",i->data);
}

// tim node cuoi cung
Node* getLastNode(TList* list)
{
	if(isEmpty(list))
		return NULL;
	Node* lastNode = list->first;
	while(lastNode->next != NULL)
		lastNode = lastNode->next;
		return lastNode;
}
//them node vao cuoi danh sach
void addNodeAtLast(TList* list, Node* pNode)
{
	if(isEmpty(list))
	{
		addFirstNode(list,pNode);
	}
	else
	{
		//tim node cuoi cung
		Node* lastNode = getLastNode(list);
		
		//bien pNode thanh node cuoi
		pNode->next = NULL;
		lastNode->next = pNode;
	}
	
}

Node* getKNode (TList* list, int value)
{
	Node* i= list->first;
	while(i!= NULL)
	{
		if(i->data == value)
			return i;
		i = i->next;
	}
	return NULL;
}

void removeNode(TList* list, Node* delNode)
{
	if(delNode == NULL || list == NULL)
		return;
	
	//Neu can xoa phan tu dau tien
	if (list->first == delNode)
	{
		list->first = list->first->next;
		free(delNode);
	}
	//Neu la phan tu bat ki trong danh sach
	else
	{
		//tim node preNode dung truoc delNode
		Node* preNode = list->first;
		while(preNode->next != delNode)
			preNode = preNode->next;
		preNode->next = delNode->next;
		free(delNode);
	}
}

//chèn node
void insertNode(Node *head, int x){
    Node *p = createNode(x);
    if (head == NULL){ //ds rỗng
        head = p;
        return;
    }
    Node *r = head;
    Node *prev = NULL;
    while (r != NULL && r->data <= p->data){
        if (r->data == p->data) //phần tử cần chèn đã có (tức mũ đó đã có, chỉ cập nhật giá trị hệ số)
        {
            break;
        }
        prev = r; //biến lưu giá trị trước đó của r
        r = r->next;
    }

    if (r == NULL){ // thêm phần tử vào cuối
            prev->next = p;
    }
    else if(r->data != p->data){
        
        p->next = r;
        if (prev == NULL){ //thêm phần tử vào đầu
            head = p;
        }
        else
            prev->next = p;
        
    }
}

int main(){
    TList* list = createList();
	int n;
    printf("Nhap so luong pha tu list: ");
	scanf("%d",&n);
	int i;
	for(i=0;i<n;i++)
		addNodeAtLast(list,createNode(inputData()));

    printfList(list);
    printf("\n");
    printf("Nhap du lieu cua node moi: ");
    int newnode;
    scanf("%d", &newnode);
    insertNode(list->first, newnode);
    printfList(list);
    printf("\n");
    printf("Nhap du lieu cua node muon xoa: ");
    int delnode;
    scanf("%d", &delnode);
    Node* KNode = getKNode(list, delnode);
    removeNode(list, KNode);
    printfList(list);
}
