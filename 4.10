//4.10
#include<stdio.h>
#include<math.h>
#include<stdlib.h>
#include<stdbool.h>
// Hoàng Hải Yến
struct node{ 
 	int data; 
 	struct node* next; 
};
 
typedef struct node Node;

typedef struct {
	Node* first;
    Node* last;
}TList;

//kiem tra xem DSLK co rong ko, neu rong thi con tro first tro vao NULL
bool isEmpty(TList* list){
	return list->first==NULL && list->last == NULL; //neu dung thi tra ve TRUE
}

//ham tao danh sach
TList* createList(){
	TList* list = (TList*)malloc(sizeof(TList));
	list->first = NULL;
    list->last = NULL;
	return list;
}

//ham cap phat node
Node* allocateNode(){
	Node* pNode = (Node*)malloc(sizeof(Node));
	if(pNode == NULL)
		printf("\tKhong du o nho cap phat\n");
	return pNode;
}

//ham khoi tao, cap phat o nho va gan gia tri cho 1 node
Node* createNode(int value)
{
	//xin cap phat cho 1 bien node
	Node* pNode = allocateNode();
	pNode->data = value;
	pNode->next = NULL; //tam thoi tro vao NULL vi chua biet tro vao dau
	return pNode;
}
// ham nhap value (data cho node)
int inputData()
{
	int tmp;
	scanf("%d",&tmp);
	return tmp;
}

//ham them mot node vao vi tri dau tien cua DSLK (DSLK rong)
void addFirstNode(TList* list, Node* pNode)
{
    list->first = list->last = pNode;
	pNode->next = list->first;
}


// Thêm một node vào cuối danh sách
void addNodeAtLast(TList* list, Node* pNode) {
    if (isEmpty(list)) {
        // Nếu danh sách rỗng, thêm node đầu tiên
        addFirstNode(list, pNode);
    } else {
        // Nếu danh sách không rỗng, thêm vào cuối danh sách
        list->last->next = pNode;
        pNode->next = list->first;
        list->last= pNode;
    }
}

//in toan bo danh sach
void printfList(TList* list)
{
	if (isEmpty(list)) {
        return;
    }
    Node* i = list->first;
    do {
        printf("%d ", i->data);
        i = i->next;
    } while (i != list->first);
    printf("\n");
}

void combine(TList* P, TList* Q){
    Node* lastNode = P->last;
    Node* firstNode = Q->first;
    if (!isEmpty(Q)){ //P khác rỗng mới tiến hành ghép P vào Q
        if (isEmpty(Q)){
            P = Q;
        }
        else{
            Q->last->next = P->first;
            P->last->next = Q->first;
        }
    }
}


void duplicate(TList* list, TList* L)
{
	if (isEmpty(list)) {
        printf("list rong");
    }
    Node* i = list->first;
    do {
        addNodeAtLast(L,createNode(i->data));
        i = i->next;
    } while (i != list->first);
}

int main(){
    
    //a/
    TList* listP = createList();
    TList* listQ = createList();
	int nP;
    printf("Nhap so luong pha tu list: ");
	scanf("%d",&nP);
	int i;
	for(i = 0; i < nP; i++)
		addNodeAtLast(listP,createNode(inputData()));
    printf("Nhap so luong pha tu list: ");
    int nQ;
    scanf("%d",&nQ);
    for(i = 0; i < nQ; i++)
		addNodeAtLast(listQ,createNode(inputData()));
    combine(listP, listQ);
    printfList(listP);
    printf("\n");

   // b/
   TList* list = createList();
   TList* L = createList();
   int n;
   printf("Nhap so luong phan tu list: ");
   scanf("%d",&n);
   int i;
   for(i = 0; i < n; i++){
    addNodeAtLast(list,createNode(inputData()));
   }
   printfList(list);
   duplicate(list, L);
   printfList(L);
}
